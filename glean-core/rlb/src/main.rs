pub extern crate once_cell;

// Re-export of `glean_core` types we can re-use.
// That way a user only needs to depend on this crate, not on glean_core (and there can't be a
// version mismatch).
pub use glean_core::{
    metrics::CounterMetricTrait, metrics::CounterMetric, CommonMetricData, ErrorType,
    Lifetime,
};

/// Run a closure with a mutable reference to the locked global Glean object.
fn with_glean<F, R>(f: F) -> R
where
    F: FnOnce(&mut glean_core::Glean) -> R,
{
    let mut lock = glean_core::global_glean()
        .expect("Global Glean object not initialized")
        .lock()
        .unwrap();
    f(&mut lock)
}

// This is required. If we try to implement CounterMetricTrait for
// glean_core::metrics::CounterMetric then we hit
// error[E0117]: only traits defined in the current crate can be implemented for arbitrary types
pub struct CounterMetricType(pub(crate) CounterMetric);

// Internally we implement this ourselves, because we need to delegate around and fetch the
// Glean object, etc.
impl CounterMetricTrait for CounterMetricType {
    fn new(meta: CommonMetricData) -> Self {
        Self(glean_core::metrics::CounterMetric::new(meta))
    }

	fn add(&self, amount: i32) {
		println!(
			"RLB CounterMetric.add({:?}) dispatches using with_glean",
			amount
		);
		with_glean(|glean| {
			// Important note: this will use with_glean() to access the Glean
			// singleton and use the Dispatcher to call off the main thread.
			self.0.add(glean, amount)
		})
	}

	fn test_get_value(&self) -> Option<i32> { None }
}

// FOG

mod fog {
    use super::{
		CommonMetricData, CounterMetricTrait, CounterMetricType, Lifetime
	};
    use std::sync::Arc;
    use inherent::inherent;

    fn need_ipc() -> bool {
        false
    }

    // This will be as currently defined in FOG, simplified
    // here for the sake of the example.
    pub struct CounterMetricIpc {}

    pub enum ProcessAwareCounterMetric {
        Parent(Arc<CounterMetricType>),
        Child(CounterMetricIpc),
    }

    #[inherent(pub)]
    impl CounterMetricTrait for ProcessAwareCounterMetric {
		fn new(meta: CommonMetricData) -> Self {
            if need_ipc() {
                ProcessAwareCounterMetric::Child(CounterMetricIpc{ /* placeholder */})
            } else {
                ProcessAwareCounterMetric::Parent(Arc::new(
                    CounterMetricType::new(meta)
                ))
            }
		}

        fn add(&self, amount: i32) {
            match self {
                ProcessAwareCounterMetric::Parent(p) => {
                    println!("ProcessAwareCounterMetric.add({:?}) - parent", amount);
                    let metric = Arc::clone(&p);
                    // Important: the dispatcher is handled by the RLB trait
                    // implementation.
                    CounterMetricTrait::add(&*metric, amount);
                }
                ProcessAwareCounterMetric::Child(_) => {
                    println!("ProcessAwareCounterMetric.add({:?}) - child", amount);
                    // ... does the IPC magic ...
                }
            }
        }

        // comment this to see the error.
        // It's unfortunately an annoying `cannot return without recursing` error instead of a
        // nicer one telling us what's missing.
        fn test_get_value(&self) -> Option<i32> { None }
    }

    // generated code
    // this will be generated by glean_parser, then included in the fog crate, thus exposed to users
    pub mod glean_metrics {

		use super::{
			CommonMetricData, Lifetime
		};

        #[allow(non_upper_case_globals)]
        pub static count_things: once_cell::sync::Lazy<super::ProcessAwareCounterMetric> =
			once_cell::sync::Lazy::new(|| super::ProcessAwareCounterMetric::new(
				CommonMetricData {
					name: "count_things".into(),
					category: "glean_metrics".into(),
					send_in_pings: vec!["store1".into()],
					disabled: false,
					lifetime: Lifetime::Ping,
					..Default::default()
				}
			)
		);
    }
}

// -- Consumer code

use fog::glean_metrics::*;

fn main() {
    count_things.add(2502);
}
